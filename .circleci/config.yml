e2eTest: &e2eTest
    machine: true
    working_directory: /home/circleci/.go_workspace/src/github.com/giantswarm/release-operator
    steps:
    - checkout

    - attach_workspace:
        at: .

    - run: |
        wget -q $(curl -sS https://api.github.com/repos/giantswarm/e2e-harness/releases/latest | grep browser_download_url | head -n 1 | cut -d '"' -f 4)
        chmod +x ./e2e-harness

    - run: ./e2e-harness localkube

    - run: ./e2e-harness setup --remote=false

    - run: ./e2e-harness test --test-dir=${E2E_TEST_DIR}

    - store_artifacts:
        path: .e2e-harness/workdir/logs
        destination: logs

    - run:
        name: Finish with cleanup, no matter if the test succeeded or not
        command: ./e2e-harness teardown
        when: always

version: 2.1

orbs:
  app-catalog:
    executors:
      my-executor:
        docker:
          - image: circleci/golang:1.12.4
  
    commands:
      create-tarball:
        steps:
          - run:
              name: "Creates a tarball file"
              command: |
                set -o errexit
                set -o nounset
                set -o pipefail
      
                readonly HELM_DIR=helm/${CIRCLE_PROJECT_REPONAME}-chart
                readonly HELM_URL=https://storage.googleapis.com/kubernetes-helm
                readonly HELM_TARBALL=helm-v2.11.0-linux-amd64.tar.gz
      
                echo_green() {
                  echo -e "\e[32m${1}"
                }
                echo_red() {
                  echo -e "\e[31m${1}"
                }
                echo_yellow() {
                  echo -e "\e[33m${1}"
                }

                setup_helm_client() {
                  echo "Setting up Helm client..."
                  curl --user-agent curl-ci-sync -sSL -o "${HELM_TARBALL}" "${HELM_URL}/${HELM_TARBALL}"
                  tar xzfv "${HELM_TARBALL}"
                  PATH="$(pwd)/linux-amd64/:$PATH"
                  helm init --client-only
                }

                echo "Setting up Helm package..."
                setup_helm_client

                sed -i -e "s/\[\[ \.SHA \]\]/${CIRCLE_SHA1}/g" $(find $HELM_DIR -type f)

                echo $(grep -nr $CIRCLE_SHA1 $HELM_DIR)
                helm package ${HELM_DIR}

                echo_green "ok: Created helm package"        
    jobs:
      checkout:
        executor: my-executor
        steps:
          - checkout
          - create-tarball


jobs:
  build:
    machine: true
    steps:
    - checkout

    - run: |
        wget -q $(curl -sS -H "Authorization: token $RELEASE_TOKEN" https://api.github.com/repos/giantswarm/architect/releases/latest | grep browser_download_url | head -n 1 | cut -d '"' -f 4)
        chmod +x ./architect
        ./architect version
    - run: ./architect build
    - store_test_results:
        path: /tmp/results
    - persist_to_workspace:
        root: .
        paths:
          - ./release-operator
          - ./architect

  e2eTestBasic:
    environment:
      E2E_TEST_DIR: "integration/test/basic"
    <<: *e2eTest

  e2eTestMultiReleaseHandling:
    environment:
      E2E_TEST_DIR: "integration/test/multireleasehandling"
    <<: *e2eTest

  e2eTestReleaseHandling:
    environment:
      E2E_TEST_DIR: "integration/test/releasehandling"
    <<: *e2eTest

  e2eTestReleaseCycle:
    environment:
      E2E_TEST_DIR: "integration/test/releasecycle"
    <<: *e2eTest

  deploy:
    machine: true
    steps:
    - checkout

    - attach_workspace:
        at: .

    - run: ./architect deploy

workflows:
  version: 2.1
  build_e2e:
    jobs:
      - app-catalog/checkout
          
      - build

      - e2eTestBasic:
          requires:
          - build
      - e2eTestMultiReleaseHandling:
          requires:
          - build
      - e2eTestReleaseHandling:
          requires:
          - build
      - e2eTestReleaseCycle:
          requires:
          - build

      - deploy:
          filters:
            branches:
              only: master
          requires:
          - e2eTestBasic
          - e2eTestMultiReleaseHandling
          - e2eTestReleaseHandling
          - e2eTestReleaseCycle

