e2eTest: &e2eTest
    machine: true
    working_directory: /home/circleci/.go_workspace/src/github.com/giantswarm/release-operator
    steps:
    - checkout

    - attach_workspace:
        at: .

    - run: |
        wget -q $(curl -sS https://api.github.com/repos/giantswarm/e2e-harness/releases/latest | grep browser_download_url | head -n 1 | cut -d '"' -f 4)
        chmod +x ./e2e-harness

    - run: ./e2e-harness localkube

    - run: ./e2e-harness setup --remote=false

    - run: ./e2e-harness test --test-dir=${E2E_TEST_DIR}

    - store_artifacts:
        path: .e2e-harness/workdir/logs
        destination: logs

    - run:
        name: Finish with cleanup, no matter if the test succeeded or not
        command: ./e2e-harness teardown
        when: always

version: 2.1

orbs:
  app-catalog:
    commands:
      tools-info-command:
        steps:
          - run: |
              architect version
          - run: |
              echo $BASH_VERSION
          - run: |
              git version
          - run: |
              helm version -c

      prepare-git-ssh-command:
        steps:
          - run: |
              [ ! -z "${CATALOGBOT_SSH_KEY_PRIVATE_BASE64}" ] && exit 0 || echo "CATALOGBOT_SSH_KEY_PRIVATE_BASE64 env variable must not be empty" ; exit 1
          - run: |
              mkdir -p ~/.ssh
          - run: |
              echo ${CATALOGBOT_SSH_KEY_PRIVATE_BASE64} | base64 -d > ~/.ssh/id_rsa
          - run: |
              chmod 0600 ~/.ssh/id_rsa
          - run: |
              git config --global url."ssh://git@github.com".insteadOf "https://github.com"
          - run: |
              git config --global gc.auto 0

      push-command:
        parameters:
          app_catalog:
            type: "string"
          app_catalog_test:
            type: "string"
          chart:
            type: "string"
        steps:
          - run: |
              [ -z ${CIRCLE_TAG} ] && echo -n '<<parameters.app_catalog_test>>' > .app_catalog_name || echo -n '<<parameters.app_catalog>>' > .app_catalog_name
          - run: |
              [[ <<parameters.chart>> == ${CIRCLE_PROJECT_REPONAME}* ]] && exit 0 || echo "chart parameter value must start with ${CIRCLE_PROJECT_REPONAME}" ; exit 1
          - run: |
              architect helm template --dir ./helm/<<parameters.chart>>
          - run: |
              git clone -q --depth=1 --single-branch -b master "git@github.com:giantswarm/$(cat .app_catalog_name).git" .app_catalog 
          - run: |
              helm package --save=false ./helm/<<parameters.chart>> --destination .app_catalog
          - run: |
              helm repo index --url https://giantswarm.github.com/$(cat .catalog_name) .app_catalog
          - run: |
              cd .app_catalog && git add -A
          - run: |
              cd .app_catalog && git commit -m "add <<parameters.chart>>:$(architect project version)"
          - run: |
              cd .app_catalog && git push


    executors:
      architect:
        docker:
          - entrypoint: /bin/bash
            image: quay.io/giantswarm/architect:latest

    jobs:
      push:
        executor: architect 
        parameters:
          app_catalog:
            description: "Name of the Github repository inside giantswarm organization hosting the App Catalog for tagged builds."
            type: "string"
          app_catalog_test:
            description: "Name of the Github repository inside giantswarm organization hosting the App Catalog for test builds."
            type: "string"
          chart:
            description: "Name of the chart inside helm directory to push to the App Catalog."
            type: "string"
        steps:
          - checkout # This is build-in CircleCI command.
          - tools-info-command
          - prepare-git-ssh-command
          - push-command:
              app_catalog: <<parameters.app_catalog>>
              app_catalog_test: <<parameters.app_catalog_test>>


jobs:
  build:
    machine: true
    steps:
    - checkout

    - run: |
        wget -q $(curl -sS -H "Authorization: token $RELEASE_TOKEN" https://api.github.com/repos/giantswarm/architect/releases/latest | grep browser_download_url | head -n 1 | cut -d '"' -f 4)
        chmod +x ./architect
        ./architect version
    - run: ./architect build
    - store_test_results:
        path: /tmp/results
    - persist_to_workspace:
        root: .
        paths:
          - ./release-operator
          - ./architect

  e2eTestBasic:
    environment:
      E2E_TEST_DIR: "integration/test/basic"
    <<: *e2eTest

  e2eTestMultiReleaseHandling:
    environment:
      E2E_TEST_DIR: "integration/test/multireleasehandling"
    <<: *e2eTest

  e2eTestReleaseHandling:
    environment:
      E2E_TEST_DIR: "integration/test/releasehandling"
    <<: *e2eTest

  e2eTestReleaseCycle:
    environment:
      E2E_TEST_DIR: "integration/test/releasecycle"
    <<: *e2eTest

  deploy:
    machine: true
    steps:
    - checkout

    - attach_workspace:
        at: .

    - run: ./architect deploy


workflows:
  build-and-e2e-test:
    jobs:
      - app-catalog/push:
          name: "app-catalog-push"
          app_catalog: "magic-catalog"
          app_catalog_test: "magic-catalog"
          chart: "release-operator-chart"

      - build

      - e2eTestBasic:
          requires:
          - build
      - e2eTestMultiReleaseHandling:
          requires:
          - build
      - e2eTestReleaseHandling:
          requires:
          - build
      - e2eTestReleaseCycle:
          requires:
          - build

      - deploy:
          filters:
            branches:
              only: master
          requires:
          - e2eTestBasic
          - e2eTestMultiReleaseHandling
          - e2eTestReleaseHandling
          - e2eTestReleaseCycle
